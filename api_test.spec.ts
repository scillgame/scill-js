/**
 * SCILL API
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: support@scillgame.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AuthApi", () => {
  let instance: api.AuthApi
  beforeEach(function() {
    instance = new api.AuthApi(config)
  });

  test("generateAccessToken", () => {
    const body: api.ForeignUserIdentifier = undefined
    return expect(instance.generateAccessToken(body, {})).resolves.toBe(null)
  })
  test("getUserBattlePassNotificationTopic", () => {
    const battle_pass_id: string = "battle_pass_id_example"
    return expect(instance.getUserBattlePassNotificationTopic(battle_pass_id, {})).resolves.toBe(null)
  })
  test("getUserChallengeNotificationTopic", () => {
    const challenge_id: string = "challenge_id_example"
    return expect(instance.getUserChallengeNotificationTopic(challenge_id, {})).resolves.toBe(null)
  })
  test("getUserChallengesNotificationTopic", () => {
    return expect(instance.getUserChallengesNotificationTopic({})).resolves.toBe(null)
  })
})

describe("BattlePassesApi", () => {
  let instance: api.BattlePassesApi
  beforeEach(function() {
    instance = new api.BattlePassesApi(config)
  });

  test("activateBattlePassLevel", () => {
    const appId: string = "appId_example"
    const levelId: string = "levelId_example"
    return expect(instance.activateBattlePassLevel(appId, levelId, {})).resolves.toBe(null)
  })
  test("claimBattlePassLevelReward", () => {
    const appId: string = "appId_example"
    const levelId: string = "levelId_example"
    return expect(instance.claimBattlePassLevelReward(appId, levelId, {})).resolves.toBe(null)
  })
  test("getActiveBattlePasses", () => {
    const appId: string = "appId_example"
    return expect(instance.getActiveBattlePasses(appId, {})).resolves.toBe(null)
  })
  test("getAllBattlePassLevels", () => {
    const appId: string = "appId_example"
    return expect(instance.getAllBattlePassLevels(appId, {})).resolves.toBe(null)
  })
  test("getBattlePass", () => {
    const appId: string = "appId_example"
    const battlePassId: string = "battlePassId_example"
    return expect(instance.getBattlePass(appId, battlePassId, {})).resolves.toBe(null)
  })
  test("getBattlePassLevels", () => {
    const appId: string = "appId_example"
    const battlePassId: string = "battlePassId_example"
    return expect(instance.getBattlePassLevels(appId, battlePassId, {})).resolves.toBe(null)
  })
  test("getBattlePasses", () => {
    const appId: string = "appId_example"
    return expect(instance.getBattlePasses(appId, {})).resolves.toBe(null)
  })
  test("getUnlockedBattlePasses", () => {
    const appId: string = "appId_example"
    return expect(instance.getUnlockedBattlePasses(appId, {})).resolves.toBe(null)
  })
  test("unlockBattlePass", () => {
    const appId: string = "appId_example"
    const battlePassId: string = "battlePassId_example"
    const body: api.BattlePassUnlockPayload = undefined
    return expect(instance.unlockBattlePass(appId, battlePassId, body, {})).resolves.toBe(null)
  })
})

describe("ChallengesApi", () => {
  let instance: api.ChallengesApi
  beforeEach(function() {
    instance = new api.ChallengesApi(config)
  });

  test("activatePersonalChallenge", () => {
    const appId: string = "appId_example"
    const challengeId: string = "challengeId_example"
    return expect(instance.activatePersonalChallenge(appId, challengeId, {})).resolves.toBe(null)
  })
  test("cancelPersonalChallenge", () => {
    const appId: string = "appId_example"
    const challengeId: string = "challengeId_example"
    return expect(instance.cancelPersonalChallenge(appId, challengeId, {})).resolves.toBe(null)
  })
  test("claimPersonalChallengeReward", () => {
    const appId: string = "appId_example"
    const challengeId: string = "challengeId_example"
    return expect(instance.claimPersonalChallengeReward(appId, challengeId, {})).resolves.toBe(null)
  })
  test("generateWebsocketAccessToken", () => {
    return expect(instance.generateWebsocketAccessToken({})).resolves.toBe(null)
  })
  test("getActivePersonalChallenges", () => {
    const appId: string = "appId_example"
    return expect(instance.getActivePersonalChallenges(appId, {})).resolves.toBe(null)
  })
  test("getPersonalChallengeById", () => {
    const appId: string = "appId_example"
    const challengeId: string = "challengeId_example"
    return expect(instance.getPersonalChallengeById(appId, challengeId, {})).resolves.toBe(null)
  })
  test("getPersonalChallenges", () => {
    const appId: string = "appId_example"
    return expect(instance.getPersonalChallenges(appId, {})).resolves.toBe(null)
  })
  test("unlockPersonalChallenge", () => {
    const appId: string = "appId_example"
    const challengeId: string = "challengeId_example"
    return expect(instance.unlockPersonalChallenge(appId, challengeId, {})).resolves.toBe(null)
  })
})

describe("EventsApi", () => {
  let instance: api.EventsApi
  beforeEach(function() {
    instance = new api.EventsApi(config)
  });

  test("getAvailableEvents", () => {
    return expect(instance.getAvailableEvents({})).resolves.toBe(null)
  })
  test("sendEvent", () => {
    const body: api.EventPayload = undefined
    return expect(instance.sendEvent(body, {})).resolves.toBe(null)
  })
})

