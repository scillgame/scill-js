/**
 * SCILL API
 * SCILL gives you the tools to activate, retain and grow your user base in your app or game by bringing you features well known in the gaming industry: Gamification. We take care of the services and technology involved so you can focus on your game and content.
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@scillgame.com
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("AuthApi", () => {
  let instance: api.AuthApi
  beforeEach(function() {
    instance = new api.AuthApi(config)
  });

  test("generateAccessToken", () => {
    const body: api.ForeignUserIdentifier = undefined
    return expect(instance.generateAccessToken(body, {})).resolves.toBe(null)
  })
  test("getLeaderboardNotificationTopic", () => {
    const leaderboard_id: string = "leaderboard_id_example"
    return expect(instance.getLeaderboardNotificationTopic(leaderboard_id, {})).resolves.toBe(null)
  })
  test("getUserBattlePassNotificationTopic", () => {
    const battle_pass_id: string = "battle_pass_id_example"
    return expect(instance.getUserBattlePassNotificationTopic(battle_pass_id, {})).resolves.toBe(null)
  })
  test("getUserChallengeNotificationTopic", () => {
    const challenge_id: string = "challenge_id_example"
    return expect(instance.getUserChallengeNotificationTopic(challenge_id, {})).resolves.toBe(null)
  })
  test("getUserChallengesNotificationTopic", () => {
    return expect(instance.getUserChallengesNotificationTopic({})).resolves.toBe(null)
  })
  test("getUserInfo", () => {
    return expect(instance.getUserInfo({})).resolves.toBe(null)
  })
  test("setUserInfo", () => {
    const body: api.UserInfo = undefined
    return expect(instance.setUserInfo(body, {})).resolves.toBe(null)
  })
})

describe("BattlePassesApi", () => {
  let instance: api.BattlePassesApi
  beforeEach(function() {
    instance = new api.BattlePassesApi(config)
  });

  test("activateBattlePassLevel", () => {
    const app_id: string = "app_id_example"
    const level_id: string = "level_id_example"
    const language: string = "language_example"
    return expect(instance.activateBattlePassLevel(app_id, level_id, language, {})).resolves.toBe(null)
  })
  test("claimBattlePassLevelReward", () => {
    const app_id: string = "app_id_example"
    const level_id: string = "level_id_example"
    const language: string = "language_example"
    return expect(instance.claimBattlePassLevelReward(app_id, level_id, language, {})).resolves.toBe(null)
  })
  test("getActiveBattlePasses", () => {
    const app_id: string = "app_id_example"
    const language: string = "language_example"
    return expect(instance.getActiveBattlePasses(app_id, language, {})).resolves.toBe(null)
  })
  test("getAllBattlePassLevels", () => {
    const app_id: string = "app_id_example"
    const language: string = "language_example"
    return expect(instance.getAllBattlePassLevels(app_id, language, {})).resolves.toBe(null)
  })
  test("getBattlePass", () => {
    const app_id: string = "app_id_example"
    const battle_pass_id: string = "battle_pass_id_example"
    const language: string = "language_example"
    return expect(instance.getBattlePass(app_id, battle_pass_id, language, {})).resolves.toBe(null)
  })
  test("getBattlePassLevels", () => {
    const app_id: string = "app_id_example"
    const battle_pass_id: string = "battle_pass_id_example"
    const language: string = "language_example"
    return expect(instance.getBattlePassLevels(app_id, battle_pass_id, language, {})).resolves.toBe(null)
  })
  test("getBattlePasses", () => {
    const app_id: string = "app_id_example"
    const language: string = "language_example"
    return expect(instance.getBattlePasses(app_id, language, {})).resolves.toBe(null)
  })
  test("getUnlockedBattlePasses", () => {
    const app_id: string = "app_id_example"
    const language: string = "language_example"
    return expect(instance.getUnlockedBattlePasses(app_id, language, {})).resolves.toBe(null)
  })
  test("unlockBattlePass", () => {
    const app_id: string = "app_id_example"
    const battle_pass_id: string = "battle_pass_id_example"
    const body: api.BattlePassUnlockPayload = undefined
    const language: string = "language_example"
    return expect(instance.unlockBattlePass(app_id, battle_pass_id, body, language, {})).resolves.toBe(null)
  })
})

describe("ChallengesApi", () => {
  let instance: api.ChallengesApi
  beforeEach(function() {
    instance = new api.ChallengesApi(config)
  });

  test("activatePersonalChallenge", () => {
    const app_id: string = "app_id_example"
    const challenge_id: string = "challenge_id_example"
    const language: string = "language_example"
    return expect(instance.activatePersonalChallenge(app_id, challenge_id, language, {})).resolves.toBe(null)
  })
  test("cancelPersonalChallenge", () => {
    const app_id: string = "app_id_example"
    const challenge_id: string = "challenge_id_example"
    const language: string = "language_example"
    return expect(instance.cancelPersonalChallenge(app_id, challenge_id, language, {})).resolves.toBe(null)
  })
  test("claimPersonalChallengeReward", () => {
    const app_id: string = "app_id_example"
    const challenge_id: string = "challenge_id_example"
    const language: string = "language_example"
    return expect(instance.claimPersonalChallengeReward(app_id, challenge_id, language, {})).resolves.toBe(null)
  })
  test("generateWebsocketAccessToken", () => {
    return expect(instance.generateWebsocketAccessToken({})).resolves.toBe(null)
  })
  test("getActivePersonalChallenges", () => {
    const app_id: string = "app_id_example"
    const language: string = "language_example"
    return expect(instance.getActivePersonalChallenges(app_id, language, {})).resolves.toBe(null)
  })
  test("getAllPersonalChallenges", () => {
    const app_id: string = "app_id_example"
    const include_categories: Array<string> = undefined
    const exclude_categories: Array<string> = undefined
    const language: string = "language_example"
    return expect(instance.getAllPersonalChallenges(app_id, include_categories, exclude_categories, language, {})).resolves.toBe(null)
  })
  test("getPersonalChallengeById", () => {
    const app_id: string = "app_id_example"
    const challenge_id: string = "challenge_id_example"
    const language: string = "language_example"
    return expect(instance.getPersonalChallengeById(app_id, challenge_id, language, {})).resolves.toBe(null)
  })
  test("getPersonalChallenges", () => {
    const app_id: string = "app_id_example"
    const include_categories: Array<string> = undefined
    const exclude_categories: Array<string> = undefined
    const language: string = "language_example"
    return expect(instance.getPersonalChallenges(app_id, include_categories, exclude_categories, language, {})).resolves.toBe(null)
  })
  test("getUnresolvedPersonalChallenges", () => {
    const app_id: string = "app_id_example"
    const include_categories: Array<string> = undefined
    const exclude_categories: Array<string> = undefined
    const language: string = "language_example"
    return expect(instance.getUnresolvedPersonalChallenges(app_id, include_categories, exclude_categories, language, {})).resolves.toBe(null)
  })
  test("resetUserAppChallenges", () => {
    const app_id: string = "app_id_example"
    const user_id: string = "user_id_example"
    return expect(instance.resetUserAppChallenges(app_id, user_id, {})).resolves.toBe(null)
  })
  test("unlockPersonalChallenge", () => {
    const app_id: string = "app_id_example"
    const challenge_id: string = "challenge_id_example"
    const language: string = "language_example"
    return expect(instance.unlockPersonalChallenge(app_id, challenge_id, language, {})).resolves.toBe(null)
  })
})

describe("EventsApi", () => {
  let instance: api.EventsApi
  beforeEach(function() {
    instance = new api.EventsApi(config)
  });

  test("getAvailableEvents", () => {
    return expect(instance.getAvailableEvents({})).resolves.toBe(null)
  })
  test("sendEvent", () => {
    const body: api.EventPayload = undefined
    return expect(instance.sendEvent(body, {})).resolves.toBe(null)
  })
})

describe("LeaderboardsApi", () => {
  let instance: api.LeaderboardsApi
  beforeEach(function() {
    instance = new api.LeaderboardsApi(config)
  });

  test("getLeaderboard", () => {
    const leaderboard_id: string = "leaderboard_id_example"
    const current_page: number = 56
    const page_size: number = 56
    const start_date: string = "start_date_example"
    const end_date: string = "end_date_example"
    const language: string = "language_example"
    return expect(instance.getLeaderboard(leaderboard_id, current_page, page_size, start_date, end_date, language, {})).resolves.toBe(null)
  })
  test("getLeaderboardRanking", () => {
    const member_type: string = "member_type_example"
    const member_id: string = "member_id_example"
    const leaderboard_id: string = "leaderboard_id_example"
    const start_date: string = "start_date_example"
    const end_date: string = "end_date_example"
    const language: string = "language_example"
    return expect(instance.getLeaderboardRanking(member_type, member_id, leaderboard_id, start_date, end_date, language, {})).resolves.toBe(null)
  })
  test("getLeaderboardRankings", () => {
    const member_type: string = "member_type_example"
    const member_id: string = "member_id_example"
    const start_date: string = "start_date_example"
    const end_date: string = "end_date_example"
    const language: string = "language_example"
    return expect(instance.getLeaderboardRankings(member_type, member_id, start_date, end_date, language, {})).resolves.toBe(null)
  })
  test("getLeaderboards", () => {
    const current_page: number = 56
    const page_size: number = 56
    const start_date: string = "start_date_example"
    const end_date: string = "end_date_example"
    const language: string = "language_example"
    return expect(instance.getLeaderboards(current_page, page_size, start_date, end_date, language, {})).resolves.toBe(null)
  })
  test("resetLeaderboardRankings", () => {
    const member_type: string = "member_type_example"
    const app_id: string = "app_id_example"
    const member_id: string = "member_id_example"
    return expect(instance.resetLeaderboardRankings(member_type, app_id, member_id, {})).resolves.toBe(null)
  })
})

describe("LeaderboardsV2Api", () => {
  let instance: api.LeaderboardsV2Api
  beforeEach(function() {
    instance = new api.LeaderboardsV2Api(config)
  });

  test("getLeaderboardV2", () => {
    const leaderboard_id: string = "leaderboard_id_example"
    const start_date: string = "start_date_example"
    const end_date: string = "end_date_example"
    const aggregate: string = "aggregate_example"
    const current_page: number = 56
    const current_position: number = 56
    const page_size: number = 56
    const language: string = "language_example"
    return expect(instance.getLeaderboardV2(leaderboard_id, start_date, end_date, aggregate, current_page, current_position, page_size, language, {})).resolves.toBe(null)
  })
  test("getLeaderboardV2Ranking", () => {
    const member_type: string = "member_type_example"
    const member_id: string = "member_id_example"
    const leaderboard_id: string = "leaderboard_id_example"
    const start_date: string = "start_date_example"
    const end_date: string = "end_date_example"
    const aggregate: string = "aggregate_example"
    const language: string = "language_example"
    return expect(instance.getLeaderboardV2Ranking(member_type, member_id, leaderboard_id, start_date, end_date, aggregate, language, {})).resolves.toBe(null)
  })
  test("getLeaderboardV2Rankings", () => {
    const member_type: string = "member_type_example"
    const member_id: string = "member_id_example"
    const start_date: string = "start_date_example"
    const end_date: string = "end_date_example"
    const aggregate: string = "aggregate_example"
    const language: string = "language_example"
    return expect(instance.getLeaderboardV2Rankings(member_type, member_id, start_date, end_date, aggregate, language, {})).resolves.toBe(null)
  })
  test("getLeaderboardsV2", () => {
    const start_date: string = "start_date_example"
    const end_date: string = "end_date_example"
    const aggregate: string = "aggregate_example"
    const current_page: number = 56
    const current_position: number = 56
    const page_size: number = 56
    const language: string = "language_example"
    return expect(instance.getLeaderboardsV2(start_date, end_date, aggregate, current_page, current_position, page_size, language, {})).resolves.toBe(null)
  })
  test("resetLeaderboardV2Rankings", () => {
    const app_id: string = "app_id_example"
    const leaderboard_id: string = "leaderboard_id_example"
    return expect(instance.resetLeaderboardV2Rankings(app_id, leaderboard_id, {})).resolves.toBe(null)
  })
})

